#!/usr/bin/env python3
from abc import ABC, abstractmethod

class AbstractMap(ABC):
    """Base class for all maps which are to be supported by the framework.

    In order to provide flexibility in terms of actual map implementation, the
    framework allows each map to define its own update operations over the map,
    which we refer to as `MapUpdate`s. Agents are required to 'tag' each update,
    where the 'tag' is a part of the contract that each map implementation has 
    to provide to agents. A requirement of the tag contract is that map updates
    corresponding to different tags have no dependencies, and can thereby be
    executed concurrently. For example, a natural tag definition for a 2D gridworld
    is the grid cell position (x,y).

    All subclasses are required to implement methods marked as abstract (with an
    `@abstractmethod` decorator).
    """

    def __init__(self, use_gpu=False):
        super(AbstractMap, self).__init__()
        # Currently don't have GPU support
        self.use_gpu = use_gpu

    @abstractmethod
    def doTaggedMapUpdates(self, tag, mapUpdatesList):
        """Interface supplied by subclasses for concrete map implementation.

        Tags are defined by the subclasses, with the understanding that map updates
        corresponding to different tags are independent and can be executed
        concurrently. The map updates generated by all the agents for a particular
        tag are efficiently collated, and tag updates are performed.

        If there is shared state that needs to be updated for each tag, the
        implementation is responsible for ensuring correctness under concurrent
        updates.

        Parameters
        ----------
        tag: object, required
            The implementation-defined value for tag, such that tags are independent
            of each other.
        mapUpdatesList: list of MapUpdate objects, required
            List of implementation-defined map-update operations. It is up to the
            business logic to implement the updates.
        """
        pass

    @abstractmethod
    def getAgentMapInfo(self, agent):
        """Interface supplied by subclasses allowing agents to
        reference their own map information.

        Parameters
        ----------
        agent: object, required
            The agent's self object, used for referencing the environment
        Returns
        -------
        agent_map_info: object, required
            Map-specific agent information (for instance, for a 2D grid world, this would be the position)
        """
        pass

    @abstractmethod
    def getObservation(self):
        """Observation returned to the client, at the end of step.

        Can be identity, or something more complex, depending on the environment.
        """
        pass

    def doMapUpdates(self, tagToMapUpdatesMap):
        """Method performing dispatch of tags to implementation.

        This is meant to support parallel dispatch."""
        self.__doSequentialMapUpdates__(tagToMapUpdatesMap)

    def __doSequentialMapUpdates__(self, tagToMapUpdatesMap):
        """Sequential implementation for tagged map updates.

        This internal method is meant to be used for parity checking."""

        for tag, mapUpdatesList in tagToMapUpdatesMap.items():
            self.doTaggedMapUpdates(tag, mapUpdatesList)

