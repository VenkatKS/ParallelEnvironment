#ifndef _ABSTRACT_MAP_H
#define _ABSTRACT_MAP_H

/*
Base class for all maps which are to be supported by the framework.

In order to provide flexibility in terms of actual map implementation, the
framework allows each map to define its own update operations over the map,
which we refer to as `MapUpdate`s. Agents are required to 'tag' each update,
where the 'tag' is a part of the contract that each map implementation has 
to provide to agents. A requirement of the tag contract is that map updates
corresponding to different tags have no dependencies, and can thereby be
executed concurrently. For example, a natural tag definition for a 2D gridworld
is the grid cell position (x,y).

All subclasses are required to implement virtual methods.
*/

#include "abstract_grid_position.h"
#include "abstract_updates.h"


enum AgentMethod {
  RANDOM, DETERMINISTIC
};

class AbstractMap {
  private:
  public:
    AbstractMap(bool use_gpu=false);
    
    /*
     * Interface supplied by subclasses for concrete map implementation.

     * Tags are defined by the subclasses, with the understanding that map updates
     * corresponding to different tags are independent and can be executed
     * concurrently. The map updates generated by all the agents for a particular
     * tag are efficiently collated, and tag updates are performed.

     * If there is shared state that needs to be updated for each tag, the
     * implementation is responsible for ensuring correctness under concurrent
     * updates. Furthermore, any checking for invalid tags also has to be
     * performed by the supplied class.

     * Parameters
     * ----------
     * tag: object, required
     *     The implementation-defined value for tag, such that tags are independent
     *     of each other.
     * mapUpdatesList: list of MapUpdate objects, required
     *    List of implementation-defined map-update operations. It is up to the
     *    business logic to implement the updates.
     */
    virtual void doTaggedMapUpdates() = 0;
  
    /*
     * Interface supplied by subclasses allowing agents to
     * reference their own map information.
     *
     * Parameters
     * ----------
     * agent: object, required
     * The agent's self object, used for referencing the environment
     * 
     * Returns
     * -------
     * agent_map_info: object, required
     * Map-specific agent information (for instance, for a 2D grid world, \
     * this would be the position)
     */
    virtual std::unordered_map<AbstractAgent, AbstractGridPosition> getAgentMapInfo() = 0;

    /*
     * Observation returned to the client, at the end of step.
     *
     * Can be identity, or something more complex, depending on the environment.
     */
    virtual AbstractMap *getObservation() {
      return this;
    }

    /* Method to register agent. */
    virtual void registerAgent(AbstractAgent agent, AgentMethod method) = 0;
  
    /*
     * Method performing dispatch of tags to implementation.
     *
     * This is meant to support parallel dispatch.
     */
    void doMapUpdates(std::unordered_map<AbstractGridPosition *, AbstractUpdates *> list_of_updates) {
        return;
    }
    
  private:
    void doSequentialMapUpdates();
};

#endif
